{"ast":null,"code":"var _jsxFileName = \"/Users/wallc/Downloads/Synergy7-main/react-dashboard/src/context/TradingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useQuery } from 'react-query';\nimport axios from 'axios';\n\n// Enhanced API base URL for Williams Capital Management\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8082';\n\n// Trading context\nconst TradingContext = /*#__PURE__*/createContext();\n\n// Initial state\nconst initialState = {\n  isConnected: false,\n  wallet: {\n    address: '',\n    balance: 0,\n    balanceUSD: 0\n  },\n  trading: {\n    isActive: false,\n    totalTrades: 0,\n    successfulTrades: 0,\n    totalPnL: 0,\n    totalPnLUSD: 0,\n    winRate: 0\n  },\n  system: {\n    health: 'unknown',\n    uptime: 0,\n    lastUpdate: null\n  },\n  market: {\n    solPrice: 0,\n    solChange24h: 0\n  },\n  recentTrades: [],\n  alerts: []\n};\n\n// Reducer\nfunction tradingReducer(state, action) {\n  switch (action.type) {\n    case 'SET_CONNECTION_STATUS':\n      return {\n        ...state,\n        isConnected: action.payload\n      };\n    case 'UPDATE_WALLET':\n      return {\n        ...state,\n        wallet: {\n          ...state.wallet,\n          ...action.payload\n        }\n      };\n    case 'UPDATE_TRADING_METRICS':\n      return {\n        ...state,\n        trading: {\n          ...state.trading,\n          ...action.payload\n        }\n      };\n    case 'UPDATE_SYSTEM_HEALTH':\n      return {\n        ...state,\n        system: {\n          ...state.system,\n          ...action.payload\n        }\n      };\n    case 'UPDATE_MARKET_DATA':\n      return {\n        ...state,\n        market: {\n          ...state.market,\n          ...action.payload\n        }\n      };\n    case 'ADD_TRADE':\n      return {\n        ...state,\n        recentTrades: [action.payload, ...state.recentTrades.slice(0, 9)] // Keep last 10 trades\n      };\n    case 'ADD_ALERT':\n      return {\n        ...state,\n        alerts: [action.payload, ...state.alerts.slice(0, 19)] // Keep last 20 alerts\n      };\n    case 'SET_FULL_STATE':\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// Enhanced API functions for live trading integration\nconst api = {\n  getHealth: () => axios.get(`${API_BASE_URL}/health`),\n  getMetrics: () => axios.get(`${API_BASE_URL}/metrics`),\n  getLiveStatus: () => axios.get(`${API_BASE_URL}/live-status`),\n  getWalletInfo: () => axios.get(`${API_BASE_URL}/wallet-info`),\n  getTradingSession: () => axios.get(`${API_BASE_URL}/trading-session`),\n  getRecentTrades: () => axios.get(`${API_BASE_URL}/trading-session`),\n  // Get trades from session\n  getSystemStatus: () => axios.get(`${API_BASE_URL}/system/status`)\n};\n\n// Provider component\nexport function TradingProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(tradingReducer, initialState);\n\n  // Health check query - every 30 seconds\n  const {\n    data: healthData,\n    isError: healthError\n  } = useQuery('health', () => api.getHealth(), {\n    refetchInterval: 30000,\n    // 30 seconds\n    onSuccess: response => {\n      dispatch({\n        type: 'SET_CONNECTION_STATUS',\n        payload: true\n      });\n      dispatch({\n        type: 'UPDATE_SYSTEM_HEALTH',\n        payload: {\n          health: response.data.overall_health ? 'healthy' : 'unhealthy',\n          lastUpdate: new Date().toISOString()\n        }\n      });\n    },\n    onError: () => {\n      dispatch({\n        type: 'SET_CONNECTION_STATUS',\n        payload: false\n      });\n      dispatch({\n        type: 'UPDATE_SYSTEM_HEALTH',\n        payload: {\n          health: 'disconnected'\n        }\n      });\n    }\n  });\n\n  // Enhanced metrics query - every 30 seconds aligned with live trading system\n  const {\n    data: metricsData\n  } = useQuery('metrics', () => api.getMetrics(), {\n    refetchInterval: 30000,\n    // 30 seconds to match live trading system\n    enabled: state.isConnected,\n    onSuccess: response => {\n      const metrics = response.data;\n\n      // Update wallet data from new API structure\n      if (metrics.wallet) {\n        dispatch({\n          type: 'UPDATE_WALLET',\n          payload: {\n            address: metrics.wallet.address || '',\n            balance: metrics.wallet.balance || 0,\n            balanceUSD: metrics.wallet.balanceUSD || 0\n          }\n        });\n      }\n\n      // Update trading metrics from new API structure\n      if (metrics.trading) {\n        dispatch({\n          type: 'UPDATE_TRADING_METRICS',\n          payload: {\n            isActive: metrics.trading.isActive || false,\n            totalTrades: metrics.trading.totalTrades || 0,\n            successfulTrades: metrics.trading.successfulTrades || 0,\n            totalPnL: metrics.trading.totalPnL || 0,\n            totalPnLUSD: metrics.trading.totalPnLUSD || 0,\n            winRate: metrics.trading.winRate || 0\n          }\n        });\n      }\n\n      // Update market data from new API structure\n      if (metrics.market) {\n        dispatch({\n          type: 'UPDATE_MARKET_DATA',\n          payload: {\n            solPrice: metrics.market.solPrice || 0,\n            solChange24h: metrics.market.solChange24h || 0\n          }\n        });\n      }\n\n      // Update system health from new API structure\n      if (metrics.system) {\n        dispatch({\n          type: 'UPDATE_SYSTEM_HEALTH',\n          payload: {\n            health: metrics.system.health === 'online' ? 'healthy' : 'unhealthy',\n            uptime: metrics.system.uptime || 0,\n            lastUpdate: metrics.system.lastUpdate || new Date().toISOString()\n          }\n        });\n      }\n    }\n  });\n\n  // Recent trades query - every 30 seconds aligned with live trading system\n  const {\n    data: tradesData\n  } = useQuery('recentTrades', () => api.getTradingSession(), {\n    refetchInterval: 30000,\n    // 30 seconds to match live trading system\n    enabled: state.isConnected,\n    onSuccess: response => {\n      if (response.data && response.data.recent_trades && Array.isArray(response.data.recent_trades)) {\n        // Update recent trades from trading session data\n        dispatch({\n          type: 'SET_FULL_STATE',\n          payload: {\n            recentTrades: response.data.recent_trades.slice(0, 10)\n          }\n        });\n      }\n    }\n  });\n\n  // Calculate derived values\n  const derivedState = {\n    ...state,\n    trading: {\n      ...state.trading,\n      winRate: state.trading.totalTrades > 0 ? state.trading.successfulTrades / state.trading.totalTrades * 100 : 0\n    }\n  };\n  const contextValue = {\n    state: derivedState,\n    dispatch,\n    api,\n    isLoading: !state.isConnected\n  };\n  return /*#__PURE__*/_jsxDEV(TradingContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n}\n\n// Hook to use trading context\n_s(TradingProvider, \"oMa+sSHbhfXDoNeb55OZFdl1554=\", false, function () {\n  return [useQuery, useQuery, useQuery];\n});\n_c = TradingProvider;\nexport function useTrading() {\n  _s2();\n  const context = useContext(TradingContext);\n  if (!context) {\n    throw new Error('useTrading must be used within a TradingProvider');\n  }\n  return context;\n}\n_s2(useTrading, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TradingProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useQuery","axios","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","TradingContext","initialState","isConnected","wallet","address","balance","balanceUSD","trading","isActive","totalTrades","successfulTrades","totalPnL","totalPnLUSD","winRate","system","health","uptime","lastUpdate","market","solPrice","solChange24h","recentTrades","alerts","tradingReducer","state","action","type","payload","slice","api","getHealth","get","getMetrics","getLiveStatus","getWalletInfo","getTradingSession","getRecentTrades","getSystemStatus","TradingProvider","children","_s","dispatch","data","healthData","isError","healthError","refetchInterval","onSuccess","response","overall_health","Date","toISOString","onError","metricsData","enabled","metrics","tradesData","recent_trades","Array","isArray","derivedState","contextValue","isLoading","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTrading","_s2","context","Error","$RefreshReg$"],"sources":["/Users/wallc/Downloads/Synergy7-main/react-dashboard/src/context/TradingContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useQuery } from 'react-query';\nimport axios from 'axios';\n\n// Enhanced API base URL for Williams Capital Management\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8082';\n\n// Trading context\nconst TradingContext = createContext();\n\n// Initial state\nconst initialState = {\n  isConnected: false,\n  wallet: {\n    address: '',\n    balance: 0,\n    balanceUSD: 0,\n  },\n  trading: {\n    isActive: false,\n    totalTrades: 0,\n    successfulTrades: 0,\n    totalPnL: 0,\n    totalPnLUSD: 0,\n    winRate: 0,\n  },\n  system: {\n    health: 'unknown',\n    uptime: 0,\n    lastUpdate: null,\n  },\n  market: {\n    solPrice: 0,\n    solChange24h: 0,\n  },\n  recentTrades: [],\n  alerts: [],\n};\n\n// Reducer\nfunction tradingReducer(state, action) {\n  switch (action.type) {\n    case 'SET_CONNECTION_STATUS':\n      return { ...state, isConnected: action.payload };\n    \n    case 'UPDATE_WALLET':\n      return { ...state, wallet: { ...state.wallet, ...action.payload } };\n    \n    case 'UPDATE_TRADING_METRICS':\n      return { ...state, trading: { ...state.trading, ...action.payload } };\n    \n    case 'UPDATE_SYSTEM_HEALTH':\n      return { ...state, system: { ...state.system, ...action.payload } };\n    \n    case 'UPDATE_MARKET_DATA':\n      return { ...state, market: { ...state.market, ...action.payload } };\n    \n    case 'ADD_TRADE':\n      return {\n        ...state,\n        recentTrades: [action.payload, ...state.recentTrades.slice(0, 9)], // Keep last 10 trades\n      };\n    \n    case 'ADD_ALERT':\n      return {\n        ...state,\n        alerts: [action.payload, ...state.alerts.slice(0, 19)], // Keep last 20 alerts\n      };\n    \n    case 'SET_FULL_STATE':\n      return { ...state, ...action.payload };\n    \n    default:\n      return state;\n  }\n}\n\n// Enhanced API functions for live trading integration\nconst api = {\n  getHealth: () => axios.get(`${API_BASE_URL}/health`),\n  getMetrics: () => axios.get(`${API_BASE_URL}/metrics`),\n  getLiveStatus: () => axios.get(`${API_BASE_URL}/live-status`),\n  getWalletInfo: () => axios.get(`${API_BASE_URL}/wallet-info`),\n  getTradingSession: () => axios.get(`${API_BASE_URL}/trading-session`),\n  getRecentTrades: () => axios.get(`${API_BASE_URL}/trading-session`), // Get trades from session\n  getSystemStatus: () => axios.get(`${API_BASE_URL}/system/status`),\n};\n\n// Provider component\nexport function TradingProvider({ children }) {\n  const [state, dispatch] = useReducer(tradingReducer, initialState);\n\n  // Health check query - every 30 seconds\n  const { data: healthData, isError: healthError } = useQuery(\n    'health',\n    () => api.getHealth(),\n    {\n      refetchInterval: 30000, // 30 seconds\n      onSuccess: (response) => {\n        dispatch({ type: 'SET_CONNECTION_STATUS', payload: true });\n        dispatch({\n          type: 'UPDATE_SYSTEM_HEALTH',\n          payload: {\n            health: response.data.overall_health ? 'healthy' : 'unhealthy',\n            lastUpdate: new Date().toISOString(),\n          },\n        });\n      },\n      onError: () => {\n        dispatch({ type: 'SET_CONNECTION_STATUS', payload: false });\n        dispatch({\n          type: 'UPDATE_SYSTEM_HEALTH',\n          payload: { health: 'disconnected' },\n        });\n      },\n    }\n  );\n\n  // Enhanced metrics query - every 30 seconds aligned with live trading system\n  const { data: metricsData } = useQuery(\n    'metrics',\n    () => api.getMetrics(),\n    {\n      refetchInterval: 30000, // 30 seconds to match live trading system\n      enabled: state.isConnected,\n      onSuccess: (response) => {\n        const metrics = response.data;\n\n        // Update wallet data from new API structure\n        if (metrics.wallet) {\n          dispatch({\n            type: 'UPDATE_WALLET',\n            payload: {\n              address: metrics.wallet.address || '',\n              balance: metrics.wallet.balance || 0,\n              balanceUSD: metrics.wallet.balanceUSD || 0,\n            },\n          });\n        }\n\n        // Update trading metrics from new API structure\n        if (metrics.trading) {\n          dispatch({\n            type: 'UPDATE_TRADING_METRICS',\n            payload: {\n              isActive: metrics.trading.isActive || false,\n              totalTrades: metrics.trading.totalTrades || 0,\n              successfulTrades: metrics.trading.successfulTrades || 0,\n              totalPnL: metrics.trading.totalPnL || 0,\n              totalPnLUSD: metrics.trading.totalPnLUSD || 0,\n              winRate: metrics.trading.winRate || 0,\n            },\n          });\n        }\n\n        // Update market data from new API structure\n        if (metrics.market) {\n          dispatch({\n            type: 'UPDATE_MARKET_DATA',\n            payload: {\n              solPrice: metrics.market.solPrice || 0,\n              solChange24h: metrics.market.solChange24h || 0,\n            },\n          });\n        }\n\n        // Update system health from new API structure\n        if (metrics.system) {\n          dispatch({\n            type: 'UPDATE_SYSTEM_HEALTH',\n            payload: {\n              health: metrics.system.health === 'online' ? 'healthy' : 'unhealthy',\n              uptime: metrics.system.uptime || 0,\n              lastUpdate: metrics.system.lastUpdate || new Date().toISOString(),\n            },\n          });\n        }\n      },\n    }\n  );\n\n  // Recent trades query - every 30 seconds aligned with live trading system\n  const { data: tradesData } = useQuery(\n    'recentTrades',\n    () => api.getTradingSession(),\n    {\n      refetchInterval: 30000, // 30 seconds to match live trading system\n      enabled: state.isConnected,\n      onSuccess: (response) => {\n        if (response.data && response.data.recent_trades && Array.isArray(response.data.recent_trades)) {\n          // Update recent trades from trading session data\n          dispatch({\n            type: 'SET_FULL_STATE',\n            payload: { recentTrades: response.data.recent_trades.slice(0, 10) },\n          });\n        }\n      },\n    }\n  );\n\n  // Calculate derived values\n  const derivedState = {\n    ...state,\n    trading: {\n      ...state.trading,\n      winRate: state.trading.totalTrades > 0 \n        ? (state.trading.successfulTrades / state.trading.totalTrades) * 100 \n        : 0,\n    },\n  };\n\n  const contextValue = {\n    state: derivedState,\n    dispatch,\n    api,\n    isLoading: !state.isConnected,\n  };\n\n  return (\n    <TradingContext.Provider value={contextValue}>\n      {children}\n    </TradingContext.Provider>\n  );\n}\n\n// Hook to use trading context\nexport function useTrading() {\n  const context = useContext(TradingContext);\n  if (!context) {\n    throw new Error('useTrading must be used within a TradingProvider');\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}